//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum PullRequestStatus {
    #[sea_orm(num_value = 0)]
    Pending,
    #[sea_orm(num_value = 1)]
    Approved,
    #[sea_orm(num_value = 2)]
    Rejected,
    #[sea_orm(num_value = 3)]
    Merged,
    #[sea_orm(num_value = 4)]
    Closed,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "pull_requests")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: u64,
    pub number: u64,
    pub repository: String,
    pub status: PullRequestStatus,
    pub merge_commit_id: Option<String>,
    pub head_commit_id: String,
    pub head_ref: String,
    pub base_ref: String,
    pub assignee: Option<String>,
    pub approved_by: Option<String>,
    pub priority: i32,
    pub try_test: bool,
    pub rollup: i32,
    pub squash: bool,
    pub delegate: Option<String>,
}

// One to many relationship
#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Merge,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Merge => Entity::has_many(super::merges::Entity).into(),
        }
    }
}

use super::merges::Entity as MergesEntity;
impl Related<MergesEntity> for Entity {
    fn to() -> RelationDef {
        Relation::Merge.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
